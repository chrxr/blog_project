{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "RDS for ECS",
  "Parameters": {
    "DBMasterUsername": {
      "Type": "String",
      "Description": "The master username for the RDS instance",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },
    "DBMasterPassword": {
      "NoEcho": "true",
      "Type": "String",
      "Description": "The master password for the RDS instance",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },
    "InitialDBName": {
      "Type": "String",
      "Description": "The name of the initial DB"
    },
    "DBAllocatedStorage": {
        "Default": "5",
        "Description": "The size of the database (GiB)",
        "Type": "Number",
        "MinValue": "5",
        "MaxValue": "1024"
    },
    "DjangoDebugMode": {
      "Type": "String",
      "AllowedValues": ["0", "1"],
      "Description": "1 for debug on"
    },
    "DjangoSecretKey": {
      "Type": "String",
      "MinLength": "15",
      "Description": "Secret key for Django"
    },
    "DjangoSuperUserUsername": {
      "Type": "String",
      "Description": "Username for Django superuser"
    },
    "DjangoSuperUserPassword": {
      "Type": "String",
      "NoEcho": "true",
      "Description": "Password for Django superuser"
    },
    "DjangoSuperUserEmail": {
      "Type": "String",
      "Description": "Email address for Django superuser"
    },
    "DjangoAllowedHosts": {
      "Type": "String",
      "Description": "The hosts allowed access to Django"
    },
    "useS3": {
      "Type": "String",
      "AllowedValues": ["true", "false"],
      "Description": "Whether or not we will use S3 for static storage"
    }
  },
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [{
        "Label": "Parameters",
        "Parameters": ["DBMasterUsername", "DBMasterPassword", "InitialDBName", "DBAllocatedStorage"]
      }],
      "ParameterLabels": {
        "DBMasterUsername": {"default": "DB Master Username"},
        "DBMasterPassword": {"default": "DB Master Password"},
        "InitialDBName": {"default": "Name for initial DB"},
        "DBAllocatedStorage": {"default": "Database allocated storage"}
      }
    }
  },

  "Resources": {
    "ecsVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.1.0.0/16",
        "InstanceTenancy": "default",
        "Tags": [{"Key": "Name", "Value": "ECS VPC"}]
      }
    },
    "privateSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select" : [ 
            "0", 
            { 
              "Fn::GetAZs" : "" 
            } 
          ]
        },
        "CidrBlock": "10.1.1.0/24",
        "Tags": [{"Key": "Name", "Value": "ECS subnet"}],
        "VpcId": {"Ref": "ecsVPC"}
      }
    },

    "publicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select" : [ 
            "0", 
            { 
              "Fn::GetAZs" : "" 
            } 
          ]
        },
        "CidrBlock": "10.1.2.0/24",
        "Tags": [{"Key": "Name", "Value": "ELB subnet"}],
        "VpcId": {"Ref": "ecsVPC"}
      }
    },
    
    "publicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select" : [ 
            "1", 
            { 
              "Fn::GetAZs" : "" 
            } 
          ]
        },
        "CidrBlock": "10.1.5.0/24",
        "Tags": [{"Key": "Name", "Value": "ELB subnet"}],
        "VpcId": {"Ref": "ecsVPC"}
      }
    },

    "internetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [{"Key": "Name", "Value": "ALB Internet Gateway"}]
      }
    },

    "gatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {"Ref": "internetGateway"},
        "VpcId": {"Ref": "ecsVPC"}
      }
    },  

    "igRouteTable": {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
          "Tags" : [ {"Key": "Name", "Value": "Route table for IG"}],
          "VpcId" : {"Ref": "ecsVPC"}
        }
    },

    "subnet1RtAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {"Ref": "igRouteTable"},
        "SubnetId": {"Ref": "publicSubnet1"}
      }
    },

    "subnet2RtAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {"Ref": "igRouteTable"},
        "SubnetId": {"Ref": "publicSubnet2"}
      }
    },

    "ECSsubnet1RtAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {"Ref": "igRouteTable"},
        "SubnetId": {"Ref": "ECSSubnet1"}
      }
    },

    "ECSsubnet2RtAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {"Ref": "igRouteTable"},
        "SubnetId": {"Ref": "ECSSubnet2"}
      }
    },

    "igRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {"Ref": "internetGateway"},
        "RouteTableId": {"Ref": "igRouteTable"}
      }
    },

    "ECSSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select" : [ 
            "0", 
            { 
              "Fn::GetAZs" : "" 
            } 
          ]
        },
        "CidrBlock": "10.1.3.0/24",
        "Tags": [{"Key": "Name", "Value": "ECS subnet"}],
        "VpcId": {"Ref": "ecsVPC"}
      }
    },

    "ECSSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select" : [ 
            "1", 
            { 
              "Fn::GetAZs" : "" 
            } 
          ]
        },
        "CidrBlock": "10.1.4.0/24",
        "Tags": [{"Key": "Name", "Value": "ECS subnet"}],
        "VpcId": {"Ref": "ecsVPC"}
      }
    },

    "RDSSubnetGroup": {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Properties" : {
        "DBSubnetGroupDescription" : "SubnetGroup for ecsRDS",
        "DBSubnetGroupName" : "ecsRDSSubgroup",
        "SubnetIds" : [ {"Ref": "ECSSubnet1"}, {"Ref": "ECSSubnet2"} ]
      }
    },

    "RDSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for ECS RDS",
        "GroupName": "RDSSecurityGroup",
        "Tags": [{"Key": "Name", "Value": "SG for ECS RDS"}],
        "VpcId": {"Ref": "ecsVPC"}, 
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.1.1.0/24",
            "FromPort": "5432",
            "ToPort": "5432",
            "IpProtocol": "tcp"
          }
        ]
      }
    },

    "ECSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for ECS task",
        "GroupName": "ECSTaskSecurityGroup",
        "Tags": [{"Key": "Name", "Value": "ECS Task SG"}],
        "VpcId": {"Ref": "ecsVPC"}, 
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "8000",
            "ToPort": "8000",
            "IpProtocol": "tcp"
          }
        ]
      }
    },   
    
    "PublicSubnetSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for public subnets",
        "GroupName": "PublicSubnetSecurityGroup",
        "Tags": [{"Key": "Name", "Value": "SG for ECS RDS"}],
        "VpcId": {"Ref": "ecsVPC"}, 
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "80",
            "ToPort": "80",
            "IpProtocol": "tcp"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "443",
            "ToPort": "443",
            "IpProtocol": "tcp"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "22",
            "ToPort": "22",
            "IpProtocol": "tcp"
          }
        ]
      }
    },  

    "ecsLoadbalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "IpAddressType": "ipv4",
        "Name": "ecsLoadbalancer",
        "Subnets": [{"Ref": "publicSubnet1"}, {"Ref": "publicSubnet2"}],
        "Type": "application"
      }
    },

    "ecsRDS": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AllocatedStorage": {"Ref": "DBAllocatedStorage"},
        "DBInstanceClass": "db.t3.micro",
        "Engine": "postgres",
        "MasterUsername": { "Ref" : "DBMasterUsername" },
        "MasterUserPassword": { "Ref" : "DBMasterPassword" },
        "DBName": { "Ref" : "InitialDBName" },
        "DBSubnetGroupName": {"Ref": "RDSSubnetGroup"},
        "Port": "5432",
        "VPCSecurityGroups": [
          {"Fn::GetAtt": ["RDSSecurityGroup", "GroupId"]}
        ]
      } 
    },

    "websiteS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "chrxr-static-media-bucket",
        "AccessControl": "PublicRead",
        "CorsConfiguration": {
            "CorsRules": [
              {
                "AllowedHeaders": [
                    "*"
                ],
                "AllowedMethods": [
                    "GET"
                ],
                "AllowedOrigins": [
                    "*"
                ],
                "ExposedHeaders": [
                    "Date"
                ],
                "Id": "myCORSRuleId1",
                "MaxAge": "3600"
              }
            ]
          },
        "Tags": [{"Key": "Name", "Value": "Django static/media assets"}]
      }
    },

    "ecsS3IAMPolicy": {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "IAM policy for Django container to push static and media assets to S3",
        "ManagedPolicyName" : "ECStoS3policy",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
              {
                  "Sid": "1",
                  "Effect": "Allow",
                  "Action": [
                      "s3:PutObject",
                      "s3:GetObjectAcl",
                      "s3:GetObject",
                      "s3:ListBucket",
                      "s3:DeleteObject",
                      "s3:PutObjectAcl"
                  ],
                  "Resource": [
                      {"Fn::Sub": [ "arn:aws:s3:::${BucketName}/*", {"BucketName": {"Ref": "websiteS3Bucket"}} ]}
                  ]
              }
          ]
        }
      } 
    },

    "ecsS3IAMRole": {   
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [    
                  "ecs-tasks.amazonaws.com"
                ]
              },
              "Action": [ 
                "sts:AssumeRole" 
              ]
            }
          ]
        },
        "Description" : "IAM policy for Django container to push static and media assets to S3",
        "ManagedPolicyArns" : [ {"Ref": "ecsS3IAMPolicy"} ],
        "RoleName" : "ECStoS3Role",
      }
    },

    "ecsCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": "ECSClusterCF"
      }
    },

    "ecsService": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {"Ref": "ecsCluster"},
        "LaunchType": "FARGATE",
        "NetworkConfiguration": {
          "AwsVpcConfiguration": {
            "AssignPublicIp": "ENABLED",
            "Subnets": [
              {"Ref": "ECSSubnet1"},
              {"Ref": "ECSSubnet2"},
            ],
            "SecurityGroups": [
              {"Ref": "ECSSecurityGroup"}
            ]
          }
        },
        "Tags": [{"Key": "Name", "Value": "ECSCFService"}],
        "ServiceName": "ECSCFService",
        "DesiredCount": "1",
        "TaskDefinition": {"Ref": "ecsCFTaskDef"}
      }
    },

    "CloudwatchLogsGroup":{
      "Type":"AWS::Logs::LogGroup",
      "Properties":{
        "LogGroupName":{
          "Fn::Join":[
            "-",
            [
              "ECSLogGroup",
              {
                "Ref":"AWS::StackName"
              }
            ]
          ]
        },
        "RetentionInDays":14
      }
    },

    "ecsCFTaskDef": {
      "Type" : "AWS::ECS::TaskDefinition",
      "Properties" : {
        "RequiresCompatibilities": ["FARGATE"],
        "Family": "BlogECSTaskDefFamily",
        "Volumes": [
          {"Name": "media_volume"},
          {"Name": "static_volume"}
        ],
        "TaskRoleArn": {"Ref": "ecsS3IAMRole"},
        "NetworkMode": "awsvpc",
        "Cpu": "1024",
        "Memory": "2048",
        "ExecutionRoleArn": "arn:aws:iam::046080352995:role/ecsTaskExecutionRole",
        "ContainerDefinitions": [
          { 
            "PortMappings": [
              {"ContainerPort": 8000}
            ],
            "Name": "blogTaskCF",
            "EntryPoint": ["/home/app/web/entrypoint.prod.sh"],
            "Environment": [
              {"Name": "DEBUG", "Value": {"Ref": "DjangoDebugMode"} },
              {"Name": "SECRET_KEY", "Value": {"Ref": "DjangoSecretKey"} },
              {"Name": "DJANGO_ALLOWED_HOSTS", "Value": "*"},
              {"Name": "DJANGO_SETTINGS_MODULE", "Value": "blog_project.settings.production"},
              {"Name": "COMMENT_SQL_ENGINE", "Value": "django.db.backends.postgresql"},
              {"Name": "COMMENT_SQL_DATABASE", "Value": "blog_project"},
              {"Name": "SQL_USER", "Value": "postgres"},
              {"Name": "SQL_PASSWORD", "Value": "postgres"},
              {"Name": "SQL_HOST", "Value": ""},
              {"Name": "SQL_PORT", "Value": "5432"},
              {"Name": "DJANGO_SUPERUSER_PASSWORD", "Value": {"Ref": "DjangoSuperUserPassword"} },
              {"Name": "DJANGO_SUPERUSER_EMAIL", "Value": {"Ref": "DjangoSuperUserEmail"} },
              {"Name": "DJANGO_SUPERUSER_USERNAME", "Value": {"Ref": "DjangoSuperUserUsername"} } 
            ],
            "Image": "046080352995.dkr.ecr.us-east-1.amazonaws.com/blog-project:v2.0",
            "MountPoints": [
              {"ContainerPath": "/home/app/web/media", "SourceVolume": "media_volume"},
              {"ContainerPath": "/home/app/web/static", "SourceVolume": "static_volume"},
            ],
            "WorkingDirectory": "/home/app/web",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options":{
                "awslogs-group":{
                  "Ref":"CloudwatchLogsGroup"
                },
                "awslogs-region":{
                  "Ref":"AWS::Region"
                },
                "awslogs-stream-prefix":"ecs-demo-app"
              }
            },
          }
        ]
      }    
    }
  }
}